{% extends "base.html.twig" %}

{% block title %}{% if city is not null %}{{ city.name }} - {{ parent() }}{% else %}{{ parent() }}{% endif %}{% endblock %}

{% block body %}

	<nav aria-label="breadcrumb">
      <ol class="breadcrumb">
        <li class="breadcrumb-item"><a href="{{ url("homepage") }}">{{ "homepage"|trans }}</a></li>
        <li class="breadcrumb-item active" aria-current="page">{% if city is null %}{{ "unknown_city"|trans }}{% else %}{{ city.name }}{% endif %}</li>
      </ol>
    </nav>
        
    {% for label, messages in app.flashes %}
    	{% if loop.index0 == 0 %}
    		<div class="position-relative overflow-hidden text-center bg-light" style="padding-left: 3rem !important; padding-top: 1rem !important; padding-right: 3rem !important; margin-left: 1rem !important; margin-top: 1rem !important; margin-right: 1rem !important;">
		{% endif %}
      	{% for message in messages %}
      		<div class="alert alert-{{ label }}" role="alert">{{ message|nl2br }}</div>
      	{% endfor %}
    	{% if loop.index0 == 0 %}
    		</div>
        {% endif %}
  	{% endfor %}

	{% if city is null %}
		<div class="px-3 py-3 pb-md-4 mx-auto text-center">
          <h1 class="display-4">{{ "unknown_city"|trans }}</h1>
        </div>
	{% else %}

        <div class="px-3 py-3 pb-md-4 mx-auto text-center">
          <h1 style="font-size: 4rem;">{{ city.name }}</h1>
          <p class="lead">
          	{{ "encourage_lists"|trans }}
          </p>
          
          {% if form_end is not empty and "now"|date("Y-m-d H:i:s") < form_end|date("Y-m-d H:i:s") %}
              <p class="lead">
              	<button type="button" class="btn btn-primary" data-toggle="modal" data-target="#beNotifiedModal">
    				{{ "be_notified"|trans }}
    		    </button>
              </p>
          {% endif %}
          
          <p class="lead">
          	{% include 'template/share_buttons.html.twig' %}
          </p>
        </div>
        {% if city.validatedLists|length == 0 %}
        	{% if questions|length == 0 or (form_start is not empty and "now"|date("Y-m-d H:i:s") < form_start|date("Y-m-d H:i:s")) %}
                <div class="px-3 py-3 pb-md-4 mx-auto text-center">
            		<h2>{{ "no_list"|trans }}</h2>
                </div>
            {% else %}
                <div class="px-3 py-3 pb-md-4 mx-auto text-center">
            		<h2>{{ "no_list_questions_below"|trans|nl2br }}</h2>
                </div>
                
                <div class="px-3 py-3 pb-md-4 mx-auto">
                	
                	<h5><em>{{ "ask_question_beginning"|trans }}</em></h5>
                	<br>
                	
                	
                    {% set lastCategory = null %}
                    {% set lastQuestion = null %}
                    
                	{% for question in questions %}
                	
                        {% if lastCategory == null or question.category.id != lastCategory.id %}
                        	<br><br>
                			<center><h4>{{ question.category.name|upper }}</h4></center>
                		{% endif %}
                	
                        {% if lastQuestion == null or question.id != lastQuestion.id %}
                		
                            {% if lastCategory != null and question.category.id == lastCategory.id %}
                    			<hr>
                    		{% endif %}
                			<h5><em>...{{ question.text|nl2br }}</em> <span class="badge badge-dark" data-toggle="tooltip" data-placement="bottom" title="{{ "occurrence_hint"|trans }}" style="cursor: default;">{{ question.occurrence }}</span></h5>
                		{% endif %}
            			
            			{% set lastCategory = question.category %}
            			{% set lastQuestion = question %}
                	
                	{% endfor %}
            	</div>
            {% endif %}
        {% else %}
        	<div class="px-3 py-3 pb-md-4 mx-auto">
        	
            	<center>
            		<h3>{{ "lists_that_answered"|trans }}</h3>
            		
            		{% for list in city.validatedLists %}
            			<div style="{% if loop.index < city.validatedLists|length %}padding-bottom: 1rem;{% endif %}">
                			<a href="{{ url("list", {"id": list.id, "name": list.nameForUrl}) }}" style="color: #ff6c00;"><h5 style="line-height: 0.6; color: #ff6c00;">{{ list.name }}</h5></a>
                            {{ "list_led_by"|trans({"%name1%": list.firstnameHeadOfList1~" "~list.lastnameHeadOfList1, "%name2%": list.firstnameHeadOfList2~" "~list.lastnameHeadOfList2}) }}
                        </div>
            		{% endfor %}
            		<h3>{{ "answers"|trans }}</h3>
        		</center>
        	</div>
        	
        	<div class="px-3 py-3 pb-md-4 mx-auto">
            	
            	<h5><em>{{ "ask_question_beginning"|trans }}</em></h5>
            	<br>
            	
            	
                {% set lastCategory = null %}
                {% set lastQuestion = null %}
                
            	{% for answer in answers %}
            	
                    {% if lastCategory == null or answer.question.category.id != lastCategory.id %}
                    	<br><br>
            			<center><h4>{{ answer.question.category.name|upper }}</h4></center>
            		{% endif %}
            	
                    {% if lastQuestion == null or answer.question.id != lastQuestion.id %}
            		
            			{% if lastCategory != null and answer.question.category.id == lastCategory.id %}
                			<hr>
                		{% endif %}
                		
            			<h5><em>...{{ answer.question.text|nl2br }}</em> <span class="badge badge-dark" data-toggle="tooltip" data-placement="bottom" title="{{ "occurrence_hint"|trans }}" style="cursor: default;">{{ answer.question.occurrence }}</span></h5>
            		{% endif %}
            		
            		<a style="color: #ff6c00;" href="{{ url("list", {"id": answer.list.id, "name": answer.list.nameForUrl}) }}"><strong>{{ answer.list.name }}</strong></a> - <strong><em>{{ ("answer_value_"~answer.value)|trans }}</em></strong>
                    <br> 

        			{% if answer.text is not empty %}
            			<p>
            				<em style="font-size: 0.8em;">{{ answer.text|nl2br }}</em>
            			</p>
        			{% endif %}
        			
        			{% set lastCategory = answer.question.category %}
        			{% set lastQuestion = answer.question %}
            	
            	{% endfor %}
        	</div>
    	{% endif %}
        
        <div id="map" style="min-height: 80vh"></div>
        
        
          
        {% if form_end is not empty and "now"|date("Y-m-d H:i:s") < form_end|date("Y-m-d H:i:s") %}
            <div class="modal fade" id="beNotifiedModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
    			<div class="modal-dialog" role="document">
    				<div class="modal-content">
    					<div class="modal-header">
    						<h5 class="modal-title" id="exampleModalLabel">{{ "be_notified"|trans }}</h5>
    						<button type="button" class="close" data-dismiss="modal" aria-label="Close">
    							<span aria-hidden="true">&times;</span>
    						</button>
    					</div>
    					<form method="POST">
    						
        					<div class="modal-body">
            					
        						<p>{{ "be_notified_hint"|trans({"%city%": city.name}) }}</p>
        						
                                <div class="form-group">
                                    <label for="exampleInputEmail1">{{ "email"|trans }}</label>
                                    <input type="email" class="form-control" name="email" id="exampleInputEmail1" aria-describedby="emailHelp" placeholde="{{ "email"|trans }}" required>
                                    <small id="emailHelp" class="form-text text-muted">{{ "be_notified_email_hint"|trans }}</small>
                                </div>
        					</div>
        					<div class="modal-footer">
        						<button type="button" class="btn btn-secondary" data-dismiss="modal">{{ "cancel"|trans }}</button>
        						<button type="submit" class="btn btn-primary">{{ "send"|trans }}</button>
        					</div>
    					</form>
    				</div>
    			</div>
    		</div>
		{% endif %}
	{% endif %}
{% endblock %}

{% block js %}
    <script type="application/javascript">

    {% if city is not null %}
        $(function() {
            var map = L.map('map').setView([{{ map_center }}], {{ map_zoom }});
            
            L.tileLayer('https://api.tiles.mapbox.com/v4/{id}/{z}/{x}/{y}.png?access_token={{ mapbox_access_token }}', {
                maxZoom: 18,
                attribution: 'Map data &copy; <a href="http://openstreetmap.org">OpenStreetMap</a> contributors, ' +
                    '<a href="http://creativecommons.org/licenses/by-sa/2.0/">CC-BY-SA</a>, ' +
                    'Imagery Â© <a href="http://mapbox.com">Mapbox</a>',
                id: 'mapbox.streets'
            }).addTo(map);
    
            // Prevent the zoom when we scroll the webpage
            map.scrollWheelZoom.disable();
    
    
    
         	// Control that shows state info on hover
            var info = L.control();
    
            var legend = L.control({position: 'bottomright'});
    
            legend.onAdd = function (map) {
    
                var div = L.DomUtil.create('div', 'info legend'),
                grades = ["#ff6c00"],
                legends = ["{{ "color_of_city_with_answer"|trans }}"]
                labels = [" {{ "colored_city_legend"|trans }}"];
    
                // loop through our density intervals and generate a label with a colored square for each interval
                for (var i = 0; i < grades.length; i++) {
                    div.innerHTML +=
                        '<h6 style="padding: 0px;"><em style="color: '+grades[i]+'; background: white; padding-left: 5px; padding-right: 5px;"> '+legends[i]+'</em> '+labels[i]+"</h6>";
            	}
    
                div.style.color = 'black';
    			div.style.padding = '0px 10px 5px 10px';
    			div.style.borderRadius = '0.5em';
    			div.style.backgroundColor = 'white';
    
            return div;
            };
    
            legend.addTo(map);
      	  
        	
        	var district_boundary;
            
            // Set geojson shapes
            $.ajax({
                dataType: "json",
                url: "{{ asset("bundles/app/cities.geojson") }}",
                success: function(data) {
        
                    var multipolygon = L.geoJson(data, {
                        style: style, onEachFeature: onEachFeature
                    });
        
                    district_boundary = multipolygon.addTo(map);
                    map.fitBounds(multipolygon.getBounds());
                }
            });
        
            // Design layout features
            function onEachFeature(feature, layer) {
                
                layer.on({
                    mouseover: highlightFeature,
                    mouseout: resetHighlight,
                    click: zoomToFeature
                });
            }
        
            function resetHighlight(e) {
                e.target.closePopup();
                district_boundary.resetStyle(e.target);
                info.update();
            }
        
            function zoomToFeature(e) {
    
                {% if is_mobile() == false %}
                	var whereToGo = "{{ url("city", {"insee": "XXX", "name": "YYY"}) }}";
                	{% for city in cities %}
                		if(e.target.feature.properties.insee == "{{ city.insee }}") {
                            whereToGo = whereToGo.replace("XXX", "{{ city.insee }}");
                            whereToGo = whereToGo.replace("YYY", "{{ city.nameForUrl }}");
                		}
                	{% endfor %}
                    window.location.href = whereToGo;
                {% endif %}
            }
        
            function highlightFeature(e) {
                var layer = e.target;
        
                layer.setStyle({
                    weight: 4,
                    color: '#fff',
                    dashArray: '',
                    fillOpacity: 0.7
                });
    
                var textPopup = "";
    
                {% for city in cities %}
                    if(e.target.feature.properties.insee == "{{ city.insee }}") {
    
                    	textPopup = "<center>";
                    	
                        {% if is_mobile() %}
                            var whereToGo = "{{ url("city", {"insee": "XXX", "name": "YYY"}) }}";
                        	{% for city in cities %}
                                whereToGo = whereToGo.replace("XXX", "{{ city.insee }}");
                                whereToGo = whereToGo.replace("YYY", "{{ city.nameForUrl }}");
                        	{% endfor %}
                        	textPopup += "<a href='"+whereToGo+"' style='{% if city.validatedLists|length > 0 %}color: #ff6c00;{% endif %}'>";
                    	{% endif %}
                    	
                    	textPopup += "<span style='{% if city.validatedLists|length > 0 %}color: #ff6c00;{% endif %}'><h5>{{ city.name }}</h5>";
    
                    	{% if city.validatedLists|length > 1 %}
                    		textPopup += "{{ "nb_answers"|trans({"%nb%": city.validatedLists|length}) }}";
                		{% else %}
                			textPopup += "{{ "zero_one_answer"|trans({"%nb%": city.validatedLists|length}) }}";
                    	{% endif %}
    
                    	{% if is_mobile() %}
                			textPopup += "<br/><br/>{{ "map_hint_mobile"|trans }}";
                		{% else %}
                    		textPopup += "<br/><br/>{{ "map_hint"|trans }}";
                		{% endif %}
                    	textPopup += "</span>";
    
                    	{% if is_mobile() %}
                    		textPopup += "</a></center>";
                		{% endif %}
            		}
                {% endfor %}
    
                if(textPopup) {
                    layer.bindPopup(textPopup);
                    layer.openPopup();
                }
        
                if (!L.Browser.ie && !L.Browser.opera) {
                    layer.bringToFront();
                }
        
                info.update(layer.feature.properties);
            }
        
            function style(feature) {
        
                return {
                    fillColor: getColor(feature.properties.insee),
                    weight: 1,
                    opacity: 1,
                    color: 'white',
                    dashArray: '3',
                    fillOpacity: 0.7
                };
            }
        
            function getColor(d) {
    
                {% for city in cities %}
                	
                	if(d == "{{ city.insee }}") {
                    	{% if city.validatedLists|length > 0 %}
                    		return "#ff6c00";
                    	{% endif %}
                	}
                {% endfor %}
        
        	    
            	
                return "#cccccc";
            }
    
    
    
    
    
    
        });
    {% endif %}
    </script>
{% endblock %}