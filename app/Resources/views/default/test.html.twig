{% extends "base.html.twig" %}

{% block title %}{{ parent() }}{% endblock %}

{% block body %}

	<div id="map" style="min-height: 80vh"></div>
{% endblock %}


{% block js %}
    <script type="application/javascript">

    	var map = L.map('map').setView([{{ map_center }}], {{ map_zoom }});
        
        L.tileLayer('https://api.tiles.mapbox.com/v4/{id}/{z}/{x}/{y}.png?access_token={{ mapbox_access_token }}', {
            maxZoom: 18,
            attribution: 'Map data &copy; <a href="http://openstreetmap.org">OpenStreetMap</a> contributors, ' +
                '<a href="http://creativecommons.org/licenses/by-sa/2.0/">CC-BY-SA</a>, ' +
                'Imagery Â© <a href="http://mapbox.com">Mapbox</a>',
            id: 'mapbox.streets'
        }).addTo(map);

        // Prevent the zoom when we scroll the webpage
        map.scrollWheelZoom.disable();

        // Load JSON
        $.ajax({
            dataType: "json",
            url: "{{ asset("bundles/app/cities.geojson") }}",
            success: function(data) {
    
                var multipolygon = L.geoJson(data, {
                    style: style, onEachFeature: onEachFeature
                });
    
                district_boundary = multipolygon.addTo(map);
                map.fitBounds(multipolygon.getBounds());
            }
        });

     	// Design layout features
        function onEachFeature(feature, layer) {
            
            layer.on({
                mouseover: highlightFeature,
                mouseout: resetHighlight,
                click: zoomToFeature
            });
        }
    
        function resetHighlight(e) {
            e.target.closePopup();
            district_boundary.resetStyle(e.target);
            info.update();
        }
    
        function zoomToFeature(e) {

            // TODO
        }


        
        function highlightFeature(e) {
            var layer = e.target;
    
            layer.setStyle({
                weight: 4,
                color: '#fff',
                dashArray: '',
                fillOpacity: 0.7
            });

            var textPopup = "";

            {% for city in cities %}
                if(e.target.feature.properties.insee == "{{ city.insee }}") {

                	textPopup = "<center>";
                	
                    {% if is_mobile() %}
                        var whereToGo = "{{ url("city", {"insee": "XXX", "name": "YYY"}) }}";
                    	{% for city in cities %}
                            whereToGo = whereToGo.replace("XXX", "{{ city.insee }}");
                            whereToGo = whereToGo.replace("YYY", "{{ city.nameForUrl }}");
                    	{% endfor %}
                    	textPopup += "<a href='"+whereToGo+"' style='{% if city.validatedLists|length > 0 %}color: #ff6c00;{% endif %}'>";
                	{% endif %}
                	
                	textPopup += "<span style='{% if city.validatedLists|length > 0 %}color: #ff6c00;{% endif %}'><h5>{{ city.name }}</h5>";

                	{% if city.validatedLists|length > 1 %}
                		textPopup += "{{ "nb_answers"|trans({"%nb%": city.validatedLists|length}) }}";
            		{% else %}
            			textPopup += "{{ "zero_one_answer"|trans({"%nb%": city.validatedLists|length}) }}";
                	{% endif %}

                	{% if is_mobile() %}
            			textPopup += "<br/><br/>{{ "map_hint_mobile"|trans }}";
            		{% else %}
                		textPopup += "<br/><br/>{{ "map_hint"|trans }}";
            		{% endif %}
                	textPopup += "</span>";

                	{% if is_mobile() %}
                		textPopup += "</a></center>";
            		{% endif %}
        		}
            {% endfor %}

            if(textPopup) {
                layer.bindPopup(textPopup);
                layer.openPopup();
            }
    
            if (!L.Browser.ie && !L.Browser.opera) {
                layer.bringToFront();
            }
    
            info.update(layer.feature.properties);
        }
    
        function style(feature) {
    
            return {
                fillColor: getColor(feature.properties.insee),
                weight: 1,
                opacity: 1,
                color: 'white',
                dashArray: '3',
                fillOpacity: 0.7
            };
        }
    
        function getColor(d) {

            {% for city in cities %}
            	
            	if(d == "{{ city.insee }}") {
                	{% if city.validatedLists|length > 0 %}
                		return "#ff6c00";
                	{% endif %}
            	}
            {% endfor %}
    
    	    
        	
            return "#cccccc";
        }
    </script>
{% endblock %}